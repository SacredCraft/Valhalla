import fs from 'fs-extra'

import { resolvePath } from '@valhalla/utils/path'

import { getRegistry } from './resource'

export const generateComponents = () => {
  let index = `// @sts-nocheck
// This file is autogenerated by Valhalla
// Do not edit this file directly.
import * as React from "react"

export const Components: Record<string, any> = {
`

  const registry = getRegistry()
  for (const [key, value] of Object.entries(registry.components)) {
    index += `  ${key}: {
    default: React.lazy(() => import('${value.component}')),
    name: '${value.name}',
  },
`
  }
  index += `}`

  fs.ensureDirSync(resolvePath('apps', 'web', '__cache__'))
  fs.writeFileSync(
    resolvePath('apps', 'web', '__cache__', 'components.tsx'),
    index
  )
}

export const generateIcons = () => {
  let index = `// @sts-nocheck
// This file is autogenerated by Valhalla
// Do not edit this file directly.
import * as React from "react"

export const Icons: Record<string, any> = {
`

  const registry = getRegistry()
  for (const [key, value] of Object.entries(registry.icons)) {
    if (value.defaultExport) {
      if ('names' in value) {
        const icons = value.names ?? []
        for (const icon of icons) {
          index += `  ${icon}: {
    default: React.lazy(() =>
      import('${value.component}').then((m) => ({
        default: () => <m.default.${icon} />,
      }))
    ),
    name: '${icon}',
  },
`
        }
      } else {
        index += `  ${key}: {
    default: React.lazy(() => import('${value.component}')),
    name: '${value.name}',
  },
`
      }
    } else if ('exportName' in value) {
      const exportName = value.exportName ?? key
      if ('names' in value) {
        const icons = value.names ?? []
        for (const icon of icons) {
          index += `  ${icon}: {
    default: React.lazy(() =>
      import('${value.component}').then((m) => ({
        default: () => <m.${exportName}.${icon} />,
      }))
    ),
  },
`
        }
      } else {
        index += `  ${key}: {
    default: React.lazy(() =>
      import('${value.component}').then((m) => ({
        default: () => <m.${exportName} />,
      }))
    ),
    name: '${value.name}',
  },
`
      }
    }
  }
  index += `}`

  fs.ensureDirSync(resolvePath('apps', 'web', '__cache__'))
  fs.writeFileSync(resolvePath('apps', 'web', '__cache__', 'icons.tsx'), index)
}
