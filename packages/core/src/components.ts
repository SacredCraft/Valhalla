import fs from 'fs-extra'

import { resolvePath } from '@valhalla/utils/path'

declare global {
  // eslint-disable-next-line no-var
  var _componentRegistry: ComponentRegistry | undefined
}

type Component = {
  name: string
  component: string
}

class ComponentRegistry {
  components: Record<string, Component> = {}

  static getInstance(): ComponentRegistry {
    if (!global._componentRegistry) {
      global._componentRegistry = new ComponentRegistry()
    }
    return global._componentRegistry
  }
}

export const getComponentRegistry = () => ComponentRegistry.getInstance()

export const createComponent = (component: Component) => {
  const registry = getComponentRegistry()
  registry.components[component.name] = component
  return component
}

export const generateComponents = () => {
  let index = `// @sts-nocheck
// This file is autogenerated by Valhalla
// Do not edit this file directly.
import * as React from "react"

export const Components: Record<string, any> = {
`

  const registry = getComponentRegistry()
  for (const [key, value] of Object.entries(registry.components)) {
    index += `  ${key}: {
    default: React.lazy(() => import('${value.component}')),
    name: '${value.name}',
  },
`
  }
  index += `}`

  fs.ensureDirSync(resolvePath('apps', 'web', '__cache__'))
  fs.writeFileSync(
    resolvePath('apps', 'web', '__cache__', 'components.ts'),
    index
  )
}
